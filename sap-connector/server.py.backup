import logging
import os

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from metrics import get_metrics, get_metrics_content_type
from src.routes.data_routes import router as data_router
from src.routes.sap_routes import router as sap_router
from src.routes.user_role_routes import router as user_role_router
from src.routes.notification_routes import router as notification_router
from src.routes.storage_routes import router as storage_router
from src.routes.company_routes import router as company_router
from src.routes.user_profile_routes import router as user_profile_router
from src.routes.workflow_routes import router as workflow_router
from src.routes.credit_limit_routes import router as credit_limit_router
from src.routes.business_analysis_routes import router as business_analysis_router
from src.routes.workflow_rule_routes import router as workflow_rule_router
from src.routes.customer_routes import router as customer_router
from src.routes.score_routes import router as score_router
from src.routes.sales_routes import router as sales_router
from src.routes.risk_routes import router as risk_router
from src.routes.lookup_routes import router as lookup_router
from src.routes.order_routes import router as order_router
from src.routes.sap_data_routes import router as sap_data_router
from src.routes.auth_routes import router as auth_router

# Configure logging - Limpar logs verbosos
logging.basicConfig(
    level=logging.INFO, 
    format="%(levelname)s: %(message)s"
)

# Desabilitar logs verbosos do httpx (Supabase requests)
logging.getLogger("httpx").setLevel(logging.WARNING)

# Desabilitar logs verbosos do urllib3
logging.getLogger("urllib3").setLevel(logging.WARNING)

# Manter apenas logs importantes do uvicorn
logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
logging.getLogger("uvicorn").setLevel(logging.INFO)

app = FastAPI()

# Get CORS origins from environment variable
allowed_origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000,http://localhost:5173").split(",")

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Debug middleware to inspect requests
from fastapi import Request
import json

@app.middleware("http")
async def debug_request_middleware(request: Request, call_next):
    if request.url.path.startswith("/backend/auth/login"):
        print(f"DEBUG MIDDLEWARE - URL: {request.url}")
        print(f"DEBUG MIDDLEWARE - Method: {request.method}")
        print(f"DEBUG MIDDLEWARE - Headers: {dict(request.headers)}")
        print(f"DEBUG MIDDLEWARE - Content-Type: {request.headers.get('content-type')}")
        
        # Read the body
        body = await request.body()
        print(f"DEBUG MIDDLEWARE - Body: {body}")
        print(f"DEBUG MIDDLEWARE - Body type: {type(body)}")
        
        # Try to parse as JSON
        try:
            if body:
                json_data = json.loads(body.decode())
                print(f"DEBUG MIDDLEWARE - Parsed JSON: {json_data}")
                print(f"DEBUG MIDDLEWARE - Parsed JSON type: {type(json_data)}")
        except Exception as e:
            print(f"DEBUG MIDDLEWARE - JSON parse error: {e}")
    
    response = await call_next(request)
    return response


# Health check endpoints (without /backend prefix for Kubernetes)
@app.get("/health/live")
async def liveness_probe():
    """Liveness probe for Kubernetes"""
    return JSONResponse(content={"status": "alive"}, status_code=200)


@app.get("/health/ready")
async def readiness_probe():
    """Readiness probe for Kubernetes"""
    return JSONResponse(content={"status": "ready"}, status_code=200)


@app.get("/health/internal")
async def internal_health_check():
    """Internal health check (no public access)"""
    return JSONResponse(
        content={"status": "healthy", "timestamp": "2024-01-01T00:00:00Z"},
        status_code=200,
    )


# Prometheus metrics endpoint
@app.get("/metrics")
async def metrics():
    """Prometheus metrics endpoint"""
    return Response(content=get_metrics(), media_type=get_metrics_content_type())


# Include all routes with /backend prefix for Kubernetes deployment
app.include_router(auth_router, prefix="/backend/auth", tags=["Authentication"])
app.include_router(sap_router, prefix="/backend")
app.include_router(data_router, prefix="/backend")
app.include_router(user_role_router, prefix="/backend")
app.include_router(notification_router, prefix="/backend")
app.include_router(storage_router, prefix="/backend")
app.include_router(company_router, prefix="/backend")
app.include_router(user_profile_router, prefix="/backend")
app.include_router(workflow_router, prefix="/backend")
app.include_router(credit_limit_router, prefix="/backend")
app.include_router(business_analysis_router, prefix="/backend")
app.include_router(workflow_rule_router, prefix="/backend")
app.include_router(customer_router, prefix="/backend")
app.include_router(score_router, prefix="/backend/score", tags=["Score"])
app.include_router(sales_router, prefix="/backend/sales", tags=["Sales"])
app.include_router(risk_router, prefix="/backend/risk", tags=["Risk"])
app.include_router(lookup_router, prefix="/backend")
app.include_router(order_router, prefix="/backend")
app.include_router(sap_data_router, prefix="/backend")


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
